<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AssemblerDefinition" xml:space="preserve">
    <value>Definition</value>
  </data>
  <data name="AssemblerErrorDefinitionDigit" xml:space="preserve">
    <value>Definitions cannot start with a digit.</value>
  </data>
  <data name="AssemblerErrorInvalidValue" xml:space="preserve">
    <value>Invalid value: {0}</value>
    <comment>{0} is the value.</comment>
  </data>
  <data name="AssemblerOpenFile" xml:space="preserve">
    <value>Open File</value>
  </data>
  <data name="AssemblerPreviewSong" xml:space="preserve">
    <value>Preview Song</value>
  </data>
  <data name="AssemblerSizeInBytes" xml:space="preserve">
    <value>Size in bytes: {0}</value>
    <comment>{0} is the size.</comment>
  </data>
  <data name="AssemblerTitle" xml:space="preserve">
    <value>ASM Assembler</value>
  </data>
  <data name="AssemblerValue" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="ErrorEngineOpenMIDI" xml:space="preserve">
    <value>Converting MIDI files to this game engine is not supported at this time.</value>
  </data>
  <data name="ErrorEngineSaveASM" xml:space="preserve">
    <value>Exporting to ASM from this game engine is not supported at this time.</value>
  </data>
  <data name="ErrorEngineSaveMIDI" xml:space="preserve">
    <value>Exporting to MIDI from this game engine is not supported at this time.</value>
  </data>
  <data name="ErrorLoadSong" xml:space="preserve">
    <value>Error Loading Song {0}</value>
    <comment>{0} is the song number.</comment>
  </data>
  <data name="ErrorNoTracks" xml:space="preserve">
    <value>This song has no tracks.</value>
  </data>
  <data name="ErrorOpenGBA" xml:space="preserve">
    <value>Error Loading ROM</value>
  </data>
  <data name="ErrorSaveASM" xml:space="preserve">
    <value>Error Exporting ASM</value>
  </data>
  <data name="ErrorSaveMIDI" xml:space="preserve">
    <value>Error Exporting MIDI</value>
  </data>
  <data name="ErrorSaveSF2" xml:space="preserve">
    <value>Error Exporting SF2 File</value>
  </data>
  <data name="ErrorTooManyTracks" xml:space="preserve">
    <value>Song has too many tracks ({0}).</value>
    <comment>(0) is the amount of tracks.</comment>
  </data>
  <data name="FilterOpenASM" xml:space="preserve">
    <value>ASM files</value>
  </data>
  <data name="FilterOpenGBA" xml:space="preserve">
    <value>GBA files</value>
  </data>
  <data name="FilterOpenMIDI" xml:space="preserve">
    <value>MIDI files</value>
  </data>
  <data name="FilterSaveASM" xml:space="preserve">
    <value>ASM file</value>
  </data>
  <data name="FilterSaveMIDI" xml:space="preserve">
    <value>MIDI file</value>
  </data>
  <data name="FilterSaveSF2" xml:space="preserve">
    <value>SF2 file</value>
  </data>
  <data name="MenuData" xml:space="preserve">
    <value>Data</value>
  </data>
  <data name="MenuFile" xml:space="preserve">
    <value>File</value>
  </data>
  <data name="MenuOpenASM" xml:space="preserve">
    <value>Open ASM</value>
  </data>
  <data name="MenuOpenMIDI" xml:space="preserve">
    <value>Open MIDI</value>
  </data>
  <data name="MenuOpenROM" xml:space="preserve">
    <value>Open ROM</value>
  </data>
  <data name="MenuRefreshConfig" xml:space="preserve">
    <value>Refresh Config</value>
  </data>
  <data name="MenuSaveASM" xml:space="preserve">
    <value>Export Song To ASM</value>
  </data>
  <data name="MenuSaveMIDI" xml:space="preserve">
    <value>Export Song To MIDI</value>
  </data>
  <data name="MenuSaveSF2" xml:space="preserve">
    <value>Export VoiceTable To SF2</value>
  </data>
  <data name="MenuTrackEditor" xml:space="preserve">
    <value>Track Editor</value>
  </data>
  <data name="MenuVoiceTableEditor" xml:space="preserve">
    <value>VoiceTable Editor</value>
  </data>
  <data name="MIDIConverterError" xml:space="preserve">
    <value>There was an error converting the MIDI file:{0}</value>
    <comment>{0} is newline followed by the error.</comment>
  </data>
  <data name="MIDIConverterOpenFile" xml:space="preserve">
    <value>Open MIDI</value>
  </data>
  <data name="MIDIConverterPreviewSong" xml:space="preserve">
    <value>Preview Song</value>
  </data>
  <data name="MIDIConverterTitle" xml:space="preserve">
    <value>MIDI Converter</value>
  </data>
  <data name="MIDIConverterTitleError" xml:space="preserve">
    <value>Error Converting MIDI</value>
  </data>
  <data name="Notes" xml:space="preserve">
    <value>C;C#;D;D#;E;F;F#;G;G#;A;A#;B</value>
  </data>
  <data name="PlayerDelay" xml:space="preserve">
    <value>Delay</value>
  </data>
  <data name="PlayerNotes" xml:space="preserve">
    <value>Notes</value>
  </data>
  <data name="PlayerPause" xml:space="preserve">
    <value>Pause</value>
  </data>
  <data name="PlayerPlay" xml:space="preserve">
    <value>Play</value>
  </data>
  <data name="PlayerPosition" xml:space="preserve">
    <value>Position</value>
  </data>
  <data name="PlayerStop" xml:space="preserve">
    <value>Stop</value>
  </data>
  <data name="PlayerTempo" xml:space="preserve">
    <value>Tempo</value>
  </data>
  <data name="PlayerType" xml:space="preserve">
    <value>Type</value>
  </data>
  <data name="PlayerUnpause" xml:space="preserve">
    <value>Unpause</value>
  </data>
  <data name="SuccessSaveASM" xml:space="preserve">
    <value>ASM saved to {0}.</value>
    <comment>{0} is the file name.</comment>
  </data>
  <data name="SuccessSaveMIDI" xml:space="preserve">
    <value>MIDI saved to {0}.</value>
    <comment>{0} is the file name.</comment>
  </data>
  <data name="SuccessSaveSF2" xml:space="preserve">
    <value>VoiceTable saved to {0}.</value>
    <comment>{0} is the file name.</comment>
  </data>
  <data name="TitleAssemblerError" xml:space="preserve">
    <value>Error Assembling File</value>
  </data>
  <data name="TitleError" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="TitleOpenASM" xml:space="preserve">
    <value>Open ASM</value>
  </data>
  <data name="TitleOpenGBA" xml:space="preserve">
    <value>Open GBA ROM</value>
  </data>
  <data name="TitleOpenMIDI" xml:space="preserve">
    <value>Open MIDI</value>
  </data>
  <data name="TitleSaveASM" xml:space="preserve">
    <value>Export ASM File</value>
  </data>
  <data name="TitleSaveMIDI" xml:space="preserve">
    <value>Export MIDI File</value>
  </data>
  <data name="TitleSaveSF2" xml:space="preserve">
    <value>Export SF2 File</value>
  </data>
  <data name="TrackEditorAddEvent" xml:space="preserve">
    <value>Add Event</value>
  </data>
  <data name="TrackEditorArguments" xml:space="preserve">
    <value>Arguments</value>
  </data>
  <data name="TrackEditorArgX" xml:space="preserve">
    <value>Arg. {0}</value>
    <comment>{0} is the argument number.</comment>
  </data>
  <data name="TrackEditorChangeVoices" xml:space="preserve">
    <value>Change Voices</value>
  </data>
  <data name="TrackEditorEvent" xml:space="preserve">
    <value>Event</value>
  </data>
  <data name="TrackEditorFrom" xml:space="preserve">
    <value>From</value>
  </data>
  <data name="TrackEditorOffset" xml:space="preserve">
    <value>Offset</value>
  </data>
  <data name="TrackEditorRemoveEvent" xml:space="preserve">
    <value>Remove Event</value>
  </data>
  <data name="TrackEditorTicks" xml:space="preserve">
    <value>Ticks</value>
  </data>
  <data name="TrackEditorTitle" xml:space="preserve">
    <value>Track Editor</value>
  </data>
  <data name="TrackEditorTo" xml:space="preserve">
    <value>To</value>
  </data>
  <data name="TrackEditorTrackX" xml:space="preserve">
    <value>Track {0}</value>
    <comment>{0} is the track number.</comment>
  </data>
  <data name="VoiceTableEditorAddress" xml:space="preserve">
    <value>Address</value>
  </data>
  <data name="VoiceTableEditorTitle" xml:space="preserve">
    <value>VoiceTable Editor</value>
  </data>
  <data name="PlayPlaylistBody" xml:space="preserve">
    <value>Would you like to play the following playlist?{0}</value>
    <comment>{0} is newline follow by the playlist.</comment>
  </data>
  <data name="PlayPlaylistTitle" xml:space="preserve">
    <value>Play Playlist</value>
  </data>
  <data name="PlayerNextSong" xml:space="preserve">
    <value>Next Song</value>
  </data>
  <data name="PlayerPreviousSong" xml:space="preserve">
    <value>PreviousSong</value>
  </data>
</root>